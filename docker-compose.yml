name: cornal-nestjs-ddd

services:
  mongodb1:
    image: mongo:latest
    container_name: mongodb1
    hostname: mongodb1
    restart: on-failure
    ports:
      - '27017:27017'
    links:
      - mongodb2
      - mongodb3
    depends_on:
      mongodb2:
        condition: service_started
      mongodb3:
        condition: service_started
    networks:
      - app-network
    volumes:
      - mongodb1_data:/data/db
      - mongodb1_config:/data/configdb
    command: mongod --bind_ip_all --replSet rs0 --port 27017
    extra_hosts:
      - 'host.docker.internal:host-gateway'
    healthcheck:
      test: echo "try { rs.status() } catch (err) { rs.initiate({_id:'rs0',members:[{_id:0,host:'host.docker.internal:27017',priority:1},{_id:1,host:'host.docker.internal:27018',priority:0.5},{_id:2,host:'host.docker.internal:27019',priority:0.5}]}) }" | mongosh --port 27017 --quiet
      interval: 5s
      timeout: 30s
      start_period: 0s
      start_interval: 1s
      retries: 10

  mongodb2:
    image: mongo:latest
    container_name: mongodb2
    hostname: mongodb2
    networks:
      - app-network
    restart: on-failure
    ports:
      - '27018:27018'
    volumes:
      - mongodb2_data:/data/db
      - mongodb2_config:/data/configdb
    command: mongod --bind_ip_all --replSet rs0 --port 27018
    extra_hosts:
      - 'host.docker.internal:host-gateway'

  mongodb3:
    image: mongo:latest
    container_name: mongodb3
    hostname: mongodb3
    networks:
      - app-network
    restart: on-failure
    ports:
      - '27019:27019'
    volumes:
      - mongodb3_data:/data/db
      - mongodb3_config:/data/configdb
    command: mongod --bind_ip_all --replSet rs0 --port 27019
    extra_hosts:
      - 'host.docker.internal:host-gateway'

volumes:
  mongodb1_data:
  mongodb2_data:
  mongodb3_data:
  mongodb1_config:
  mongodb2_config:
  mongodb3_config:

networks:
  app-network:
    driver: bridge
